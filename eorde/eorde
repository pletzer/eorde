#!/usr/bin/env python

import argparse
import sys
import netCDF4
import numpy
from eoNCReader import NCReader
from eoSphere import Sphere
from eoContinents import Continents
from eoContours import Contours
from eoColor import Color
from eoScene import Scene

parser = argparse.ArgumentParser(description='Visualize earth data')
parser.add_argument('--contours', default='', help='Show contours')
parser.add_argument('--color', default='', help='Plot color')
parser.add_argument('--continents', action='store_true', help='Show continents')
parser.add_argument('-f', dest='filename', default='', help='File name')
args = parser.parse_args()

if not len(args.filename):
    print('ERROR: must supply a file name')
    sys.exit(1)

# read the file
reader = NCReader(args.filename)
lons = reader.getLongitudes()
lats = reader.getLatitudes()
dts = reader.getDateTimes()

pipelines = []

if args.continents:
    sphr = Sphere(level=0)
    cnts = Continents(level=1)
    pipelines += [sphr, cnts]

if args.contours:
    ctrs = Contours(level=2)
    lons2d, lats2d = lons, lats
    if len(lons.shape) == 1:
        lons2d, lats2d = ctrs.get2DLonsLats(lons, lats)
    ctrs.setPoints(lons=lons2d, lats=lats2d)
    data = reader.getVariable(args.contours)
    if data is not None:
        # for the time being
        d = data[0,...]
        dMin, dMax = d.min(), d.max()
        vals = numpy.linspace(dMin, dMax, 21)
        ctrs.setContourValues(vals)
        ctrs.setData(d)
    else:
        print(f'ERROR: no variable with standard_name {args.contours}')
        sys.exit(2)
    pipelines.append(ctrs)

if args.color:
    clr = Color(level=0)
    lons2d, lats2d = lons, lats
    if len(lons.shape) == 1:
        lons2d, lats2d = clr.get2DLonsLats(lons, lats)
    clr.setPoints(lons=lons2d, lats=lats2d)
    data = reader.getVariable(args.color)
    if data is not None:
        # for the time being
        d = data[0,...]
        dMin, dMax = d.min(), d.max()
        clr.setData(d)
    else:
        print(f'ERROR: no variable with standard_name {args.color}')
        sys.exit(2)
    pipelines.append(clr)


scn = Scene()
scn.addPipelines(pipelines)
scn.show()






